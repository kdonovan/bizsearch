%h3 Listings


.row
  - # TODO: update page to show listings for a search group, then show most/least recently updated searches here
  - if most_recent = Listing.order(:created_at).last
    %p.col-sm-6
      Last listing pulled on #{most_recent.created_at.strftime("%B %e, %Y (%Z)")}
    %em
      (#{link_to 'refresh', run_searches_path, method: :post}).

  %p.col-sm-6
    %strong Showing:
    = link_to_unless_current 'Yep', listings_path(status: :yep)
    |
    = link_to_unless_current 'Nope', listings_path(status: :nope)
    |
    = link_to_unless params[:status].blank? || params[:status] == 'maybe', 'Undecided', listings_path(status: :maybe)

%hr
- if @listings.length.zero?
  %h2.text-center
    Nothing to show
    %small
      = link_to 'Refresh results?', run_searches_path, method: :post
- else
  %table#listings-table.table.table-striped.table-hover
    %thead
      %tr
        %th
        %th Location
        %th Price
        %th Cashflow
        %th Projected (post tax)
        %th Multiple
        %th Status
        %th Title
        %th Body

    %tbody
      - @listings.each do |listing|
        %tr.listing
          %td.clickable
          %td.clickable= [listing.state, listing.city].compact.join(', ')
          %td.clickable= dollars listing.price
          %td.clickable= dollars listing.cashflow
          %td.clickable
            - if cash = listing.repayment_projection.cashflow_after_repayment
              .pull-left{class: cash > 0 ? 'text-muted' : 'text-danger'}= dollars cash
            - if cash = listing.repayment_projection.cashflow_post_tax_and_repayment
              .pull-right{class: cash > 0 ? 'text-muted' : 'text-danger'} (#{dollars cash})
          %td.clickable= listing.multiple

          %td.status
            = listing_status listing
            .buttons
              - unless params[:status] == 'yep'
                = link_to decide_on_listing_path(listing, decision: :yep), class: 'btn btn-xs btn-success', remote: true, method: :post do
                  %span.glyphicon.glyphicon-thumbs-up
              = link_to decide_on_listing_path(listing, decision: :maybe), class: 'btn btn-xs btn-primary', remote: true, method: :post do
                %span.glyphicon.glyphicon-question-sign
              - unless params[:status] == 'nope'
                = link_to decide_on_listing_path(listing, decision: :nope), class: 'btn btn-xs btn-danger', remote: true, method: :post do
                  %span.glyphicon.glyphicon-thumbs-down

          %td.clickable.title
            .normal
              = listing.title
              .badge{class: (sl_count = listing.site_listings.size) > 1 ? '' : 'hidden'} #{sl_count} sites
              .badge{class: (note_count = listing.notes.count) > 0 ? '' : 'hidden'}
                Notes:
                %span.note_count= note_count
            .detail
              = form_for :note, url: listing_notes_path(listing), method: :post, remote: true, html: {class: 'form note-form'} do |f|
                = f.text_field :body, class: 'form-control', placeholder: 'Add note...'
                = f.submit 'Save', class: 'btn btn-primary'

          %td.details
            .well.clearfix
              .pull-right
                %strong= pluralize sl_count, 'Site:', 'Sites:'
                =raw listing.site_listings.map { |sl| link_to sl.site.name, sl.link, target: '_blank' }.join(' | ')
                ||
                = link_to 'Details', compare_site_listings_path(listing), remote: true, class: 'remote-modal'
              - if (links = listing.site_listings.map(&:business_url).compact.uniq).present?
                ||
                = links.map {|l| link_to 'Business Link', l, target: '_blank' }.join(' | ')
              .pull-left
                First seen
                %strong #{time_ago_in_words listing.created_at} ago


            .notes
              - listing.notes.reverse.each do |note|
                = listing_note listing, note

            .well=raw format_description listing.description


%hr

%h3 Caveats:
%ul
  %li Projections may be invalid for listings with e.g. real estate or inventory not included in purchase price.
  %li Listings attempt to properly group duplicates across different networks, but may fail (especially if numbers change between postings).
  %li If a listing is reposted on the same network, that'll count as a new/separate post (although depending on if numbers were changed, if it's on a second network as well the deduplication process there may bundle it as well).
